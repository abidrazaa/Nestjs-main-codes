import { NestFactory } from '@nestjs/core';
import { ValidationError, ValidationPipe } from '@nestjs/common';
import { NestExpressApplication } from '@nestjs/platform-express';
import { AppModule } from './app.module';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { ValidatorOptions } from 'class-validator';
import * as helmet from 'helmet';
import * as rateLimit from 'express-rate-limit';
import { join } from 'path';
import { ConfigService } from '@nestjs/config';

// export interface ValidationPipeOptions extends ValidatorOptions {
//   transform?: boolean;
//   disableErrorMessages?: boolean;
//   exceptionFactory?: (errors: ValidationError[]) => any;
// }

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);
  const configService = app.get(ConfigService);
  app.use(helmet());
  app.enableCors();
  app.useStaticAssets(join(__dirname, '..', 'uploads'), {
    index: false,
    prefix: '/uploads',
});
  app.useStaticAssets(join(__dirname, '..', 'public'));
  
  app.setBaseViewsDir(join(__dirname, '..', 'views'));
  
  app.use(new rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));

  app.useGlobalPipes(
    new ValidationPipe({
      /**
       * Strip away all none-object existing properties
       */
      // whitelist: true,
      /***
       * Transform input objects to their corresponding DTO objects
       */
      // transform: true,
    }),
  );

  app.use((req, res, next) => {
    const protocol = req.protocol;
    const host = req.hostname;
    const port = configService.get('PORT') || '3000';
    global.app_url = `${protocol}://${host}:${port}/`;
    req.appUrl = `${protocol}://${host}`;
    return next();
  });

  const config = new DocumentBuilder()
    .setTitle('OutDoor')
    .setDescription("OutDoor Api's")
    .setVersion('1.0')
    .addBearerAuth(
      {
        description: `Please enter token in following format: Bearer <JWT>`,
        name: 'Authorization',
        bearerFormat: 'Bearer',
        scheme: 'Bearer',
        type: 'http',
        in: 'Header',
        // scheme: 'bearer',
        // bearerFormat: 'JWT'
      },
      'access-token',
      // 'JWT-auth',
    )
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('swagger', app, document);

  const PORT = parseInt(configService.get('PORT'), 10) || 3000;
  await app.listen(PORT);
}
bootstrap();
